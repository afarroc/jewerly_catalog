@echo off
REM Script de despliegue para Windows
echo üöÄ Iniciando proceso de despliegue a Render...
echo ==============================================

REM Verificar que estamos en el directorio correcto
if not exist "manage.py" (
    echo ‚ùå Error: No se encuentra manage.py. Ejecuta este script desde la ra√≠z del proyecto.
    pause
    exit /b 1
)

REM Verificar archivos necesarios
echo üìã Verificando archivos necesarios...
set REQUIRED_FILES=requirements.txt Procfile runtime.txt build.sh .env.example
for %%f in (%REQUIRED_FILES%) do (
    if exist "%%f" (
        echo ‚úÖ %%f encontrado
    ) else (
        echo ‚ùå %%f no encontrado
        pause
        exit /b 1
    )
)

REM Verificar configuraci√≥n de Django
echo.
echo üîß Verificando configuraci√≥n de Django...
python manage.py check --deploy
if errorlevel 1 (
    echo ‚ùå Error en la configuraci√≥n de Django
    pause
    exit /b 1
)

REM Verificar archivos est√°ticos
echo.
echo üìÅ Verificando archivos est√°ticos...
if exist "static" (
    for /f %%c in ('dir /b /s static\*.css static\*.js static\*.png static\*.jpg 2^>nul ^| find /c ":"') do set STATIC_COUNT=%%c
    echo ‚úÖ Directorio static encontrado con archivos
) else (
    echo ‚ùå Directorio static no encontrado
    pause
    exit /b 1
)

REM Verificar dependencias cr√≠ticas
echo.
echo üì¶ Verificando dependencias cr√≠ticas...
python -c "import django, gunicorn, whitenoise, pymysql, stripe" 2>nul
if errorlevel 1 (
    echo ‚ùå Faltan dependencias cr√≠ticas
    pause
    exit /b 1
) else (
    echo ‚úÖ Todas las dependencias cr√≠ticas est√°n disponibles
)

echo.
echo üéØ PREPARACI√ìN COMPLETADA
echo ==========================
echo.
echo üìã Checklist antes del despliegue:
echo -----------------------------------
echo ‚úÖ Archivos de despliegue verificados
echo ‚úÖ Configuraci√≥n de Django correcta
echo ‚úÖ Dependencias instaladas
echo ‚úÖ Archivos est√°ticos presentes
echo.
echo üìù PASOS PARA DESPLEGAR EN RENDER:
echo ===================================
echo.
echo 1Ô∏è‚É£ CREAR SERVICIOS EN RENDER:
echo -----------------------------
echo    a) Ve a https://dashboard.render.com
echo    b) Crea una PostgreSQL Database
echo    c) Crea un Web Service conectado a este repositorio
echo.
echo 2Ô∏è‚É£ CONFIGURAR VARIABLES DE ENTORNO:
echo -----------------------------------
echo    Agrega estas variables en Environment:
echo.
echo    # Variables CR√çTICAS (requeridas):
echo    SECRET_KEY=django-insecure-prod-$(openssl rand -hex 32)
echo    DEBUG=False
echo    ALLOWED_HOSTS=tu-app.onrender.com
echo    CSRF_TRUSTED_ORIGINS=https://tu-app.onrender.com
echo    DATABASE_URL=[URL de tu PostgreSQL en Render]
echo.
echo    # Variables RECOMENDADAS:
echo    EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend
echo    EMAIL_HOST=smtp.gmail.com
echo    EMAIL_PORT=587
echo    EMAIL_USE_TLS=True
echo    EMAIL_HOST_USER=tu-email@gmail.com
echo    EMAIL_HOST_PASSWORD=tu-app-password
echo    DEFAULT_FROM_EMAIL=tu-email@gmail.com
echo.
echo    STRIPE_PUBLIC_KEY=pk_live_...
echo    STRIPE_SECRET_KEY=sk_live_...
echo    STRIPE_WEBHOOK_SECRET=whsec_...
echo.
echo 3Ô∏è‚É£ CONFIGURACI√ìN DEL WEB SERVICE:
echo ---------------------------------
echo    ‚Ä¢ Runtime: Python 3
echo    ‚Ä¢ Build Command: ./build.sh
echo    ‚Ä¢ Start Command: gunicorn jewerly_catalog.wsgi:application --bind 0.0.0.0:%%PORT%%
echo.
echo 4Ô∏è‚É£ DESPU√âS DEL PRIMER DESPLIEGUE:
echo ----------------------------------
echo    ‚Ä¢ Ve a la Shell de tu Web Service
echo    ‚Ä¢ Ejecuta: python manage.py migrate
echo    ‚Ä¢ Crea superusuario: python manage.py createsuperuser
echo.
echo 5Ô∏è‚É£ VERIFICACI√ìN FINAL:
echo ----------------------
echo    ‚Ä¢ Visita tu dominio: https://tu-app.onrender.com
echo    ‚Ä¢ Verifica que la p√°gina carga correctamente
echo    ‚Ä¢ Prueba el registro de usuarios
echo    ‚Ä¢ Verifica que los emails se env√≠an
echo    ‚Ä¢ Prueba el sistema de pagos
echo.
echo üéâ ¬°DESPLIEGUE COMPLETADO!
echo ===========================
echo.
echo üí° RECUERDA:
echo ‚Ä¢ Nunca subas .env con credenciales reales al repositorio
echo ‚Ä¢ Mant√©n las claves de Stripe en modo LIVE para producci√≥n
echo ‚Ä¢ Configura backups autom√°ticos para la base de datos
echo ‚Ä¢ Monitorea los logs de Render para detectar errores
echo.
echo üìû SOPORTE:
echo Si tienes problemas, revisa:
echo ‚Ä¢ Los logs de construcci√≥n en Render
echo ‚Ä¢ La configuraci√≥n de variables de entorno
echo ‚Ä¢ La conexi√≥n a la base de datos PostgreSQL
echo.
echo ¬°Tu aplicaci√≥n est√° lista para producci√≥n! üöÄ
echo.
pause